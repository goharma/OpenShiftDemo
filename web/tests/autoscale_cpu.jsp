<%@page import="javax.naming.Context"   %>
<%@page import="javax.naming.InitialContext"   %>
<%@page import="javax.naming.NamingException"   %>
<%@page import="javax.crypto.spec.IvParameterSpec"   %>

<%@page contentType="application/json" pageEncoding="UTF-8"%>
<%@page import="java.util.*, java.lang.reflect.*, javax.servlet.http.HttpSession "%>
<%@ page import="javax.crypto.spec.SecretKeySpec"%><%@ page import="java.security.NoSuchAlgorithmException"%><%@ page import="java.security.InvalidKeyException"%><%@ page import="java.security.InvalidAlgorithmParameterException"%><%@ page import="javax.crypto.*"%><%@ page import="java.security.SecureRandom"%><%@ page import="sun.misc.BASE64Encoder"%>
<%@ page session="false" %>
<%!
 public void doit(){
        String strDataToEncrypt = new String();
		String strCipherText = new String();
		String strDecryptedText = new String();
		try {
			/**
			 * Step 1. Generate an AES key using KeyGenerator Initialize the
			 * keysize to 128 bits (16 bytes)
			 *
			 */
			KeyGenerator keyGen = KeyGenerator.getInstance("AES");
			keyGen.init(256);
			SecretKey secretKey = keyGen.generateKey();

			/**
			 * Step 2. Generate an Initialization Vector (IV)
			 * 		a. Use SecureRandom to generate random bits
			 * 		   The size of the IV matches the blocksize of the cipher (128 bits for AES)
			 * 		b. Construct the appropriate IvParameterSpec object for the data to pass to Cipher's init() method
			 */

			final int AES_KEYLENGTH = 2048;	// change this as desired for the security level you want
			byte[] iv = new byte[AES_KEYLENGTH / 8];	// Save the IV bytes or send it in plaintext with the encrypted data so you can decrypt the data later
			SecureRandom prng = new SecureRandom();
			prng.nextBytes(iv);

			/**
			 * Step 3. Create a Cipher by specifying the following parameters
			 * 		a. Algorithm name - here it is AES
			 * 		b. Mode - here it is CBC mode
			 * 		c. Padding - e.g. PKCS7 or PKCS5
			 */

			Cipher aesCipherForEncryption = Cipher.getInstance("AES/CBC/PKCS7PADDING"); // Must specify the mode explicitly as most JCE providers default to ECB mode!!

			/**
			 * Step 4. Initialize the Cipher for Encryption
			 */

			aesCipherForEncryption.init(Cipher.ENCRYPT_MODE, secretKey,
					new IvParameterSpec(iv));

			/**
			 * Step 5. Encrypt the Data
			 * 		a. Declare / Initialize the Data. Here the data is of type String
			 * 		b. Convert the Input Text to Bytes
			 * 		c. Encrypt the bytes using doFinal method
			 */
			StringBuffer sb = new StringBuffer();
			for (int i=0;i<10000000;i++){
			    sb.append("a");
			}
			strDataToEncrypt = sb.toString();
			byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();
			byte[] byteCipherText = aesCipherForEncryption
					.doFinal(byteDataToEncrypt);
			// b64 is done differently on Android
			strCipherText = new BASE64Encoder().encode(byteCipherText);
			System.out.println("Cipher Text generated using AES is "
					+ strCipherText);

			/**
			 * Step 6. Decrypt the Data
			 * 		a. Initialize a new instance of Cipher for Decryption (normally don't reuse the same object)
			 * 		   Be sure to obtain the same IV bytes for CBC mode.
			 * 		b. Decrypt the cipher bytes using doFinal method
			 */

			Cipher aesCipherForDecryption = Cipher.getInstance("AES/CBC/PKCS7PADDING"); // Must specify the mode explicitly as most JCE providers default to ECB mode!!

			aesCipherForDecryption.init(Cipher.DECRYPT_MODE, secretKey,
					new IvParameterSpec(iv));
			byte[] byteDecryptedText = aesCipherForDecryption
					.doFinal(byteCipherText);
			strDecryptedText = new String(byteDecryptedText);
			System.out
					.println(" Decrypted Text message is " + strDecryptedText);
		}

		catch (NoSuchAlgorithmException noSuchAlgo) {
			System.out.println(" No Such Algorithm exists " + noSuchAlgo);
		}

		catch (NoSuchPaddingException noSuchPad) {
			System.out.println(" No Such Padding exists " + noSuchPad);
		}

		catch (InvalidKeyException invalidKey) {
			System.out.println(" Invalid Key " + invalidKey);
		}

		catch (BadPaddingException badPadding) {
			System.out.println(" Bad Padding " + badPadding);
		}

		catch (IllegalBlockSizeException illegalBlockSize) {
			System.out.println(" Illegal Block Size " + illegalBlockSize);
		}

		catch (InvalidAlgorithmParameterException invalidParam) {
			System.out.println(" Invalid Parameter " + invalidParam);
		}
		}
%>

<%!
public void rando(){
    try {
	        // Initialize a secure random number generator
	        SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");

	        // Method 1 - Calling nextBytes method to generate Random Bytes
	        byte[] bytes = new byte[512];
	        secureRandom.nextBytes(bytes);

	        // Printing the SecureRandom number by calling secureRandom.nextDouble()
	        System.out.println(" Secure Random # generated by calling nextBytes() is " + secureRandom.nextDouble());

	        // Method 2 - Using setSeed(byte[]) to reseed a Random object
	        int seedByteCount = 10;
	        byte[] seed = secureRandom.generateSeed(seedByteCount);

	        // TBR System.out.println(" Seed value is " + new BASE64Encoder().encode(seed));

	        secureRandom.setSeed(seed);

	        System.out.println(" Secure Random # generated using setSeed(byte[]) is  " + secureRandom.nextDouble());

	    } catch (NoSuchAlgorithmException noSuchAlgo)
		{
			System.out.println(" No Such Algorithm exists " + noSuchAlgo);
		}
}
%>
<%

String status = "SUCCESS";
for(int i=0; i<10;i++)
    try{
        Integer duration = Integer.valueOf(request.getParameter("duration"));

        long t= System.currentTimeMillis();
        long end = t+(duration.intValue()*1000);
        while(System.currentTimeMillis() < end) {
            new Thread(new Runnable() {
                    int j=0;
                    Date date = new Date();
                    long now = date.getTime();
                    public void run() {
                                Thread thread = Thread.currentThread();

                        System.out.println("Running: " + thread.getName());
                        rando();
                    }
                    }).start();
        }
        System.out.println("DONE");
    }catch(Exception e){
        status="ERROR";
    }
%>
{
    "response": {
        "status": "<%= status %>"
    }
}